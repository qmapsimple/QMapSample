////////////////////////////////////////////////////////////////////////
// Copyright (c) 2013,电子科学研究院
// All rights reserved.
//
// 文件名称：IThreadInterface.h
// 摘    要：interface for the IThreadInterface class
//
// 创建者：秦永刚
// 创建日期：2013年9月1日
// 完成日期：2013年9月15日
////////////////////////////////////////////////////////////////////////

#ifndef THREADINTERFACE_H
#define THREADINTERFACE_H

#include "IPlugInterface.h"
#include "IThreadBase.h"

#define ITHREADINTERFACE_NAME "ThreadInterface"

//插件接口类，产生后将该文件拷贝到Global文件夹下
class IThreadInterface : public IPlugInterface  //线程管理接口
{
public:
    //在此处声明插件对外公布的接口函数，其他插件通过该接口函数调用接口功能，定义方式如下，它的具体实现在接口实现类中完成

    /////////////////////////////////////////////////////////////////////////
    //接口名:CreateThread
    //参数：pThread-线程对象
    //返回值：bool-线程新建是否成功
    //接口说明：新建线程
    ////////////////////////////////////////////////////////////////////////
    virtual bool CreateThread(IThreadBase* pThread)=0;

    /////////////////////////////////////////////////////////////////////////
    //接口名:RunThread
    //参数：pThread-线程对象
    //返回值：bool-线程运行是否成功
    //接口说明：运行新建的线程,在新建线程成功后调用
    ////////////////////////////////////////////////////////////////////////
    virtual bool RunThread(IThreadBase* pThread)=0;

    /////////////////////////////////////////////////////////////////////////
    //接口名:SuspendThread
    //参数：pThread-线程对象
    //返回值：bool-线程挂起是否成功
    //接口说明：挂起运行的线程，在运行线程成功后调用
    ////////////////////////////////////////////////////////////////////////
    virtual bool SuspendThread(IThreadBase* pThread)=0;

    /////////////////////////////////////////////////////////////////////////
    //接口名:ResumeThread
    //参数：pThread-线程对象
    //返回值：bool-线程唤醒是否成功
    //接口说明：唤醒挂起的线程，在挂起线程成功后调用
    ////////////////////////////////////////////////////////////////////////
    virtual bool ResumeThread(IThreadBase* pThread)=0;

    /////////////////////////////////////////////////////////////////////////
    //接口名:ExitThread
    //参数：pThread-线程对象
    //返回值：bool-线程退出是否成功
    //接口说明：退出线程，在线程存在时调用
    ////////////////////////////////////////////////////////////////////////
    virtual bool ExitThread(IThreadBase* pThread)=0;
};

#endif // THREADINTERFACE_H
